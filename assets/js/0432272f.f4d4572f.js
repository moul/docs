"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[2118],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),l=p(n),m=o,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=l;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},70725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const s={sidebar_position:3,sidebar_label:"React Embedding",description:"How to embed the widget on a React app."},i="React Embedding",a={unversionedId:"user-interface-setup/widget/embed/react",id:"user-interface-setup/widget/embed/react",title:"React Embedding",description:"How to embed the widget on a React app.",source:"@site/docs/osmosis-outpost/user-interface-setup/widget/embed/react.md",sourceDirName:"user-interface-setup/widget/embed",slug:"/user-interface-setup/widget/embed/react",permalink:"/osmosis-outpost/user-interface-setup/widget/embed/react",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/osmosis-outpost/user-interface-setup/widget/embed/react.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"React Embedding",description:"How to embed the widget on a React app."},sidebar:"tutorialSidebar",previous:{title:"NextJS Embedding",permalink:"/osmosis-outpost/user-interface-setup/widget/embed/nextjs"},next:{title:"Widget Customizable Elements",permalink:"/osmosis-outpost/category/widget-customizable-elements"}},c={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react-embedding"},"React Embedding"),(0,o.kt)("p",null,"After the installation of the npm package as outlined in the\n",(0,o.kt)("a",{parentName:"p",href:"./installation"},"related documentation"),", add the widget to your React app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import {SwapWidget} from "@nabla-studio/outpost-widget-react";\n// ...\n\n<SwapWidget \n    theme = {\n        // Theme configuration\n    },\n\n    from = {\n        // Default "from" token\n    },\n\n    to = {\n        // Default "to" token\n    },\n    \n    onAssetsChange = {\n        // Function to be called when the asset changes\n    },\n\n    osmosisConfigs = {\n        // Osmosis chain configurations\n    },\n\n    sourceConfigs = {\n        // Outpost chain configurations\n    },\n\n    endpointOptions = {\n        // Cosmos-kit endpoint options configuration\n    },\n    \n    assetsListBaseUrl = {\n        // Base url for the specific outpost assets list\n    },\n    \n    osmosisAssetsListBaseUrl = {\n        // Base url for the osmosis assets list\n    },\n    \n    coingeckoBaseUrl = {\n        // Base url for the coingecko services\n    }\n\n/>\n')))}d.isMDXComponent=!0}}]);