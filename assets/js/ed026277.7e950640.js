"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[9716],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||a;return n?o.createElement(m,i(i({ref:t},c),{},{components:n})):o.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={},i="Epochs",s={unversionedId:"modules/epochs/README",id:"modules/epochs/README",title:"Epochs",description:"Abstract",source:"@site/docs/osmosis-core/modules/epochs/README.md",sourceDirName:"modules/epochs",slug:"/modules/epochs/",permalink:"/osmosis-core/modules/epochs/",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/osmosis-core/modules/epochs/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Downtime-detector",permalink:"/osmosis-core/modules/downtime-detector/"},next:{title:"GAMM",permalink:"/osmosis-core/modules/gamm/"}},l={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Contents",id:"contents",level:2},{value:"Concepts",id:"concepts",level:2},{value:"State",id:"state",level:2},{value:"Events",id:"events",level:2},{value:"BeginBlocker",id:"beginblocker",level:3},{value:"EndBlocker",id:"endblocker",level:3},{value:"Keepers",id:"keepers",level:2},{value:"Keeper functions",id:"keeper-functions",level:3},{value:"Hooks",id:"hooks",level:2},{value:"How modules receive hooks",id:"how-modules-receive-hooks",level:3},{value:"Panic isolation",id:"panic-isolation",level:3},{value:"Queries",id:"queries",level:2},{value:"Epoch Infos",id:"epoch-infos",level:3},{value:"Current Epoch",id:"current-epoch",level:3}],c={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"epochs"},"Epochs"),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"Often in the SDK, we would like to run certain code every-so often. The\npurpose of ",(0,r.kt)("inlineCode",{parentName:"p"},"epochs")," module is to allow other modules to set that they\nwould like to be signaled once every period. So another module can\nspecify it wants to execute code once a week, starting at UTC-time = x.\n",(0,r.kt)("inlineCode",{parentName:"p"},"epochs")," creates a generalized epoch interface to other modules so that\nthey can easily be signalled upon such events."),(0,r.kt)("h2",{id:"contents"},"Contents"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#concepts"},"Concept"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#state"},"State"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#events"},"Events"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#keepers"},"Keeper"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#hooks"},"Hooks"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#queries"},"Queries")))),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("p",null,'The epochs module defines on-chain timers, that execute at fixed time intervals.\nOther SDK modules can then register logic to be executed at the timer ticks.\nWe refer to the period in between two timer ticks as an "epoch".'),(0,r.kt)("p",null,"Every timer has a unique identifier.\nEvery epoch will have a start time, and an end time, where ",(0,r.kt)("inlineCode",{parentName:"p"},"end time = start time + timer interval"),".\nOn Osmosis mainnet, we only utilize one identifier, with a time interval of ",(0,r.kt)("inlineCode",{parentName:"p"},"one day"),"."),(0,r.kt)("p",null,"The timer will tick at the first block whose blocktime is greater than the timer end time,\nand set the start as the prior timer end time. (Notably, its not set to the block time!)\nThis means that if the chain has been down for awhile, you will get one timer tick per block,\nuntil the timer has caught up."),(0,r.kt)("h2",{id:"state"},"State"),(0,r.kt)("p",null,"The Epochs module keeps a single ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/osmosis-labs/osmosis/blob/b4befe4f3eb97ebb477323234b910c4afafab9b7/proto/osmosis/epochs/genesis.proto#L12"},(0,r.kt)("inlineCode",{parentName:"a"},"EpochInfo"))," per identifier.\nThis contains the current state of the timer with the corresponding identifier.\nIts fields are modified at every timer tick.\nEpochInfos are initialized as part of genesis initialization or upgrade logic,\nand are only modified on begin blockers."),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"epochs")," module emits the following events:"),(0,r.kt)("h3",{id:"beginblocker"},"BeginBlocker"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"epoch_start"),(0,r.kt)("td",{parentName:"tr",align:null},"epoch_number"),(0,r.kt)("td",{parentName:"tr",align:null},"{epoch_number}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"epoch_start"),(0,r.kt)("td",{parentName:"tr",align:null},"start_time"),(0,r.kt)("td",{parentName:"tr",align:null},"{start_time}")))),(0,r.kt)("h3",{id:"endblocker"},"EndBlocker"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"epoch_end"),(0,r.kt)("td",{parentName:"tr",align:null},"epoch_number"),(0,r.kt)("td",{parentName:"tr",align:null},"{epoch_number}")))),(0,r.kt)("h2",{id:"keepers"},"Keepers"),(0,r.kt)("h3",{id:"keeper-functions"},"Keeper functions"),(0,r.kt)("p",null,"Epochs keeper module provides utility functions to manage epochs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Keeper is the interface for lockup module keeper\ntype Keeper interface {\n  // GetEpochInfo returns epoch info by identifier\n  GetEpochInfo(ctx sdk.Context, identifier string) types.EpochInfo\n  // SetEpochInfo set epoch info\n  SetEpochInfo(ctx sdk.Context, epoch types.EpochInfo)\n  // DeleteEpochInfo delete epoch info\n  DeleteEpochInfo(ctx sdk.Context, identifier string)\n  // IterateEpochInfo iterate through epochs\n  IterateEpochInfo(ctx sdk.Context, fn func(index int64, epochInfo types.EpochInfo) (stop bool))\n  // Get all epoch infos\n  AllEpochInfos(ctx sdk.Context) []types.EpochInfo\n}\n")),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"  // the first block whose timestamp is after the duration is counted as the end of the epoch\n  AfterEpochEnd(ctx sdk.Context, epochIdentifier string, epochNumber int64)\n  // new epoch is next block of epoch end block\n  BeforeEpochStart(ctx sdk.Context, epochIdentifier string, epochNumber int64)\n")),(0,r.kt)("h3",{id:"how-modules-receive-hooks"},"How modules receive hooks"),(0,r.kt)("p",null,"On hook receiver function of other modules, they need to filter\n",(0,r.kt)("inlineCode",{parentName:"p"},"epochIdentifier")," and only do executions for only specific\nepochIdentifier. Filtering epochIdentifier could be in ",(0,r.kt)("inlineCode",{parentName:"p"},"Params")," of other\nmodules so that they can be modified by governance."),(0,r.kt)("p",null,"This is the standard dev UX of this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-golang"},"func (k MyModuleKeeper) AfterEpochEnd(ctx sdk.Context, epochIdentifier string, epochNumber int64) {\n    params := k.GetParams(ctx)\n    if epochIdentifier == params.DistrEpochIdentifier {\n    // my logic\n  }\n}\n")),(0,r.kt)("h3",{id:"panic-isolation"},"Panic isolation"),(0,r.kt)("p",null,"If a given epoch hook panics, its state update is reverted, but we keep\nproceeding through the remaining hooks. This allows more advanced epoch\nlogic to be used, without concern over state machine halting, or halting\nsubsequent modules."),(0,r.kt)("p",null,'This does mean that if there is behavior you expect from a prior epoch\nhook, and that epoch hook reverted, your hook may also have an issue. So\ndo keep in mind "what if a prior hook didn\'t get executed" in the safety\nchecks you consider for a new epoch hook.'),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("p",null,"Epochs module is providing below queries to check the module's state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"service Query {\n  // EpochInfos provide running epochInfos\n  rpc EpochInfos(QueryEpochsInfoRequest) returns (QueryEpochsInfoResponse) {}\n  // CurrentEpoch provide current epoch of specified identifier\n  rpc CurrentEpoch(QueryCurrentEpochRequest) returns (QueryCurrentEpochResponse) {}\n}\n")),(0,r.kt)("h3",{id:"epoch-infos"},"Epoch Infos"),(0,r.kt)("p",null,"Query the currently running epochInfos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query epochs epoch-infos\n")),(0,r.kt)("p",null,"::: details Example"),(0,r.kt)("p",null,"An example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'epochs:\n- current_epoch: "183"\n  current_epoch_start_height: "2438409"\n  current_epoch_start_time: "2021-12-18T17:16:09.898160996Z"\n  duration: 86400s\n  epoch_counting_started: true\n  identifier: day\n  start_time: "2021-06-18T17:00:00Z"\n- current_epoch: "26"\n  current_epoch_start_height: "2424854"\n  current_epoch_start_time: "2021-12-17T17:02:07.229632445Z"\n  duration: 604800s\n  epoch_counting_started: true\n  identifier: week\n  start_time: "2021-06-18T17:00:00Z"\n')),(0,r.kt)("p",null,":::"),(0,r.kt)("h3",{id:"current-epoch"},"Current Epoch"),(0,r.kt)("p",null,"Query the current epoch by the specified identifier"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query epochs current-epoch [identifier]\n")),(0,r.kt)("p",null,"::: details Example"),(0,r.kt)("p",null,"Query the current ",(0,r.kt)("inlineCode",{parentName:"p"},"day")," epoch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query epochs current-epoch day\n")),(0,r.kt)("p",null,"Which in this example outputs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'current_epoch: "183"\n')))}h.isMDXComponent=!0}}]);