"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[4163],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var r=o.createContext({}),p=function(e){var n=o.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(r.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,g=c["".concat(r,".").concat(m)]||c[m]||u[m]||i;return t?o.createElement(g,l(l({ref:n},d),{},{components:t})):o.createElement(g,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=c;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},54959:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const i={},l="Pool Incentives",s={unversionedId:"modules/pool-incentives/README",id:"modules/pool-incentives/README",title:"Pool Incentives",description:"Abstract",source:"@site/docs/osmosis-core/modules/pool-incentives/README.md",sourceDirName:"modules/pool-incentives",slug:"/modules/pool-incentives/",permalink:"/osmosis-core/modules/pool-incentives/",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/osmosis-core/modules/pool-incentives/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mint",permalink:"/osmosis-core/modules/mint/"},next:{title:"Pool Manager Module",permalink:"/osmosis-core/modules/pool-manager/"}},r={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Contents",id:"contents",level:2},{value:"Concepts",id:"concepts",level:2},{value:"State",id:"state",level:2},{value:"Genesis states",id:"genesis-states",level:3},{value:"Gov",id:"gov",level:2},{value:"UpdatePoolIncentivesProposal",id:"updatepoolincentivesproposal",level:3},{value:"Transactions",id:"transactions",level:2},{value:"replace-pool-incentives",id:"replace-pool-incentives",level:3},{value:"update-pool-incentives",id:"update-pool-incentives",level:3},{value:"Queries",id:"queries",level:2},{value:"distr-info",id:"distr-info",level:3},{value:"external-incentivized-gauges",id:"external-incentivized-gauges",level:3},{value:"gauge-ids",id:"gauge-ids",level:3},{value:"incentivized-pools",id:"incentivized-pools",level:3},{value:"lockable-durations",id:"lockable-durations",level:3},{value:"params",id:"params",level:3}],d={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pool-incentives"},"Pool Incentives"),(0,a.kt)("h2",{id:"abstract"},"Abstract"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"pool-incentives")," module is separate but related to the ",(0,a.kt)("inlineCode",{parentName:"p"},"incentives")," module. When a pool is created using the ",(0,a.kt)("inlineCode",{parentName:"p"},"GAMM")," module, the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool-incentives")," module automatically creates individual gauges in the ",(0,a.kt)("inlineCode",{parentName:"p"},"incentives")," module for every lock duration that exists in that pool.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"pool-incentives")," module also takes the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool_incentives")," distributed from the ",(0,a.kt)("inlineCode",{parentName:"p"},"gov")," module and distributes it to the various incentivized gauges."),(0,a.kt)("h2",{id:"contents"},"Contents"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#concepts"},"Concept"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#state"},"State"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#gov"},"Governance"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#transactions"},"Transactions"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#queries"},"Queries")))),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("p",null,"The purpose of the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool incentives")," module is to distribute incentives\nto a pool's LPs. This assumes that pool's follow the interface from the\n",(0,a.kt)("inlineCode",{parentName:"p"},"x/gamm")," module"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Pool incentives")," module doesn't directly distribute the rewards to the\nLPs. When a pool is created, the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool incentives")," module creates a\n",(0,a.kt)("inlineCode",{parentName:"p"},"gauge")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"incentives")," module for every lock duration that exists.\nAlso, the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool incentives")," module takes a part of the minted inflation\nfrom the mint module, and automatically distributes it to the various\nselected gauges."),(0,a.kt)("h2",{id:"state"},"State"),(0,a.kt)("h3",{id:"genesis-states"},"Genesis states"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type GenesisState struct {\n // params defines all the parameters of the module.\n Params            Params          \n LockableDurations []time.Duration \n DistrInfo         *DistrInfo      \n}\n\ntype Params struct {\n // minted_denom is the denomination of the coin expected to be minted\n //  by the minting module.\n // Pool-incentives module doesn\u2019t actually mint the coin itself, \n // but rather manages the distribution of coins that matches the defined minted_denom.\n MintedDenom string \n // allocation_ratio defines the proportion of the minted minted_denom \n // that is to be allocated as pool incentives.\n AllocationRatio github_com_cosmos_cosmos_sdk_types.Dec \n}\n")),(0,a.kt)("p",null,"Lockable durations can be set to the pool incentives module at genesis.\nEvery time a pool is created, the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool incentives")," module creates the\nsame amount of 'gauge' as there are lockable durations for the pool."),(0,a.kt)("p",null,"Also in regards to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Params"),", when the mint module mints new tokens\nto the fee collector at Begin Block, the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool incentives")," module takes\nthe token which matches the 'minted denom' from the fee collector.\nTokens are taken according to the 'allocationRatio', and are distributed\nto each ",(0,a.kt)("inlineCode",{parentName:"p"},"DistrRecord")," of the DistrInfo. For example, if the fee\ncollector holds 1000uatom and 2000 uosmo at Begin Block, and Params'\nmintedDenom is set to uosmo, and AllocationRatio is set to 0.1, 200uosmo\nwill be taken from the fee collector and distributed to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"DistrRecord"),"s."),(0,a.kt)("h2",{id:"gov"},"Gov"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Pool Incentives")," module uses the values set at genesis or values added\nby chain governance to distribute part of the inflation minted by the\nmint module to specified gauges."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type DistrInfo struct {\n TotalWeight github_com_cosmos_cosmos_sdk_types.Int \n Records     []DistrRecord                          \n}\n\ntype DistrRecord struct {\n GaugeId  uint64                                 \n Weight github_com_cosmos_cosmos_sdk_types.Int \n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DistrInfo")," internally manages the ",(0,a.kt)("inlineCode",{parentName:"p"},"DistrRecord")," and total weight of all\n",(0,a.kt)("inlineCode",{parentName:"p"},"DistrRecord"),". Governance can modify DistrInfo via\n",(0,a.kt)("inlineCode",{parentName:"p"},"UpdatePoolIncentivesProposal")," proposal."),(0,a.kt)("h3",{id:"updatepoolincentivesproposal"},"UpdatePoolIncentivesProposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type UpdatePoolIncentivesProposal struct {\n Title       string       \n Description string      \n Records     []DistrRecord \n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"UpdatePoolIncentivesProposal")," can be used by governance to update\n",(0,a.kt)("inlineCode",{parentName:"p"},"DistrRecord"),"s."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"osmosisd tx gov submit-proposal update-pool-incentives [gaugeIds] [weights]\n")),(0,a.kt)("p",null,"Proposals can be proposed in using the CLI command format above.\\\nFor example, to designate 100 weight to gauge id 2 and 200 weight to\ngauge id 3, the following command can be used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"osmosisd tx gov submit-proposal update-pool-incentives 2,3 100,200\n")),(0,a.kt)("h2",{id:"transactions"},"Transactions"),(0,a.kt)("h3",{id:"replace-pool-incentives"},"replace-pool-incentives"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx poolincentives replace-pool-incentives [gaugeIds] [weights] [flags]\n")),(0,a.kt)("p",null,"::: details Example "),(0,a.kt)("p",null,"Fully replace records for pool incentives:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx poolincentives replace-pool-incentives proposal.json --from --chain-id\n")),(0,a.kt)("p",null,"The proposal.json would look as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Pool Incentive Adjustment",\n  "description": "Adjust pool incentives",\n  "records": [\n    {\n      "gauge_id": "0",\n      "weight": "100000"\n    },\n    {\n      "gauge_id": "1",\n      "weight": "1766249"\n    },\n    {\n      "gauge_id": "XXX",\n      "weight": "XXXXXXXX"\n    },\n    ...\n  ]\n}\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("h3",{id:"update-pool-incentives"},"update-pool-incentives"),(0,a.kt)("p",null,"Update the weight of specified pool gauges in regards to their share of incentives (by creating a proposal)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx poolincentives update-pool-incentives [gaugeIds] [weights] [flags] --from --chain-id\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("p",null,"Update the pool incentives for ",(0,a.kt)("inlineCode",{parentName:"p"},"gauge_id")," 0 and 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx gov submit-proposal update-pool-incentives proposal.json --from WALLET_NAME --chain-id CHAIN_ID\n")),(0,a.kt)("p",null,"The proposal.json would look as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Pool Incentive Adjustment",\n  "description": "Adjust pool incentives",\n  "records": [\n    {\n      "gauge_id": "0",\n      "weight": "100000"\n    },\n    {\n      "gauge_id": "1",\n      "weight": "1766249"\n    },\n  ]\n}\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("h2",{id:"queries"},"Queries"),(0,a.kt)("h3",{id:"distr-info"},"distr-info"),(0,a.kt)("p",null,"Query distribution info for all pool gauges"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query poolincentives distr-info\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query poolincentives distr-info\n")),(0,a.kt)("p",null,"An example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  - gauge_id: "1877"\n    weight: "60707"\n  - gauge_id: "1878"\n    weight: "40471"\n  - gauge_id: "1897"\n    weight: "1448"\n  - gauge_id: "1898"\n    weight: "869"\n  - gauge_id: "1899"\n    weight: "579"\n...\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("h3",{id:"external-incentivized-gauges"},"external-incentivized-gauges"),(0,a.kt)("p",null,"Query externally incentivized gauges (gauges distributing rewards on top of the normal OSMO rewards)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query poolincentives external-incentivized-gauges\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query poolincentives external-incentivized-gauges\n")),(0,a.kt)("p",null,"An example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'- coins:\n  - amount: "596400000"\n    denom: ibc/0EF15DF2F02480ADE0BB6E85D9EBB5DAEA2836D3860E9F97F9AADE4F57A31AA0\n  distribute_to:\n    denom: gamm/pool/562\n    duration: 604800s\n    lock_query_type: ByDuration\n    timestamp: "1970-01-01T00:00:00Z"\n  distributed_coins:\n  - amount: "596398318"\n    denom: ibc/0EF15DF2F02480ADE0BB6E85D9EBB5DAEA2836D3860E9F97F9AADE4F57A31AA0\n  filled_epochs: "28"\n  id: "1791"\n  is_perpetual: false\n  num_epochs_paid_over: "28"\n  start_time: "1970-01-01T00:00:00Z"\n- coins:\n  - amount: "1000000"\n    denom: ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED\n  distribute_to:\n    denom: gamm/pool/498\n    duration: 86400s\n    lock_query_type: ByDuration\n    timestamp: "1970-01-01T00:00:00Z"\n  distributed_coins:\n  - amount: "999210"\n    denom: ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED\n  filled_epochs: "2"\n  id: "1660"\n  is_perpetual: false\n  num_epochs_paid_over: "2"\n  start_time: "2021-10-14T16:00:00Z"\n...\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("h3",{id:"gauge-ids"},"gauge-ids"),(0,a.kt)("p",null,"Query the gauge ids (by duration) by pool id"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query poolincentives gauge-ids [pool-id] [flags]\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("p",null,"Find out what the gauge IDs are for pool 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query poolincentives gauge-ids 1\n")),(0,a.kt)("p",null,"An example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'gauge_ids_with_duration:\n- duration: 86400s\n  gauge_id: "1"\n- duration: 604800s\n  gauge_id: "2"\n- duration: 1209600s\n  gauge_id: "3"\n')),(0,a.kt)("p",null,"In this example, we see that gauge IDs 1,2, and 3 are for the one day, one week, and two week lockup periods respectively for the OSMO/ATOM pool.\n:::"),(0,a.kt)("h3",{id:"incentivized-pools"},"incentivized-pools"),(0,a.kt)("p",null,"Query all incentivized pools with their respective gauge IDs and lockup durations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query poolincentives incentivized-pools [flags]\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query poolincentives incentivized-pools\n")),(0,a.kt)("p",null,"An example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'- gauge_id: "1897"\n  lockable_duration: 86400s\n  pool_id: "602"\n- gauge_id: "1898"\n  lockable_duration: 604800s\n  pool_id: "602"\n- gauge_id: "1899"\n  lockable_duration: 1209600s\n  pool_id: "602"\n...\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("h3",{id:"lockable-durations"},"lockable-durations"),(0,a.kt)("p",null,"Query incentivized lockup durations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query poolincentives lockable-durations [flags]\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query poolincentives lockable-durations\n")),(0,a.kt)("p",null,"An example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"lockable_durations:\n- 86400s\n- 604800s\n- 1209600s\n")),(0,a.kt)("p",null,":::"),(0,a.kt)("h3",{id:"params"},"params"),(0,a.kt)("p",null,"Query pool-incentives module parameters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query poolincentives params [flags]\n")),(0,a.kt)("p",null,"::: details Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query poolincentives params\n")),(0,a.kt)("p",null,"An example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"params:\n  minted_denom: uosmo\n")),(0,a.kt)("p",null,":::"))}u.isMDXComponent=!0}}]);